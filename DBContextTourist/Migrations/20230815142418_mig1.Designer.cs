// <auto-generated />
using System;
using DBContextTourist.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBContextTourist.Migrations
{
    [DbContext(typeof(touristsContext))]
    [Migration("20230815142418_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DBContextTourist.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("date")
                        .HasColumnName("closeTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndingDay")
                        .HasColumnType("date")
                        .HasColumnName("endingDay");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("date")
                        .HasColumnName("startTime");

                    b.Property<DateTime?>("StartingDay")
                        .HasColumnType("date")
                        .HasColumnName("startingDay");

                    b.HasKey("Id");

                    b.ToTable("Activity", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("GovernerateId")
                        .HasColumnType("int")
                        .HasColumnName("governerateID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("picture");

                    b.HasKey("Id");

                    b.HasIndex("GovernerateId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("cityID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("theme");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Destination", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.DestinationPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DestId")
                        .HasColumnType("int")
                        .HasColumnName("destID");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("picture");

                    b.HasKey("Id");

                    b.HasIndex("DestId");

                    b.ToTable("DestinationPictures");
                });

            modelBuilder.Entity("DBContextTourist.Models.Exclude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Excludes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("excludes");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tourID");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Excludes");
                });

            modelBuilder.Entity("DBContextTourist.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("picture");

                    b.HasKey("Id");

                    b.ToTable("Governorate", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("cityID");

                    b.Property<int>("ClassStar")
                        .HasColumnType("int")
                        .HasColumnName("classStar");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contactNumber");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotel", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.Include", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Includes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("includes");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tourID");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Includes");
                });

            modelBuilder.Entity("DBContextTourist.Models.Itinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EachDayDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("eachDayDescription");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tourID");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Itinerary", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("cityID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Market", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("cityID");

                    b.Property<int>("ClassStar")
                        .HasColumnType("int")
                        .HasColumnName("classStar");

                    b.Property<DateTime>("ClosingHour")
                        .HasColumnType("date")
                        .HasColumnName("closingHour");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contactNumber");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cuisine");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("OpeningHour")
                        .HasColumnType("date")
                        .HasColumnName("openingHour");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Restaurant", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("companyID");

                    b.Property<decimal>("Cost")
                        .HasColumnType("money")
                        .HasColumnName("cost");

                    b.Property<string>("DaysNnights")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("daysNnights");

                    b.Property<string>("GuidLanguage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("guidLanguage");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit")
                        .HasColumnName("isPrivate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("theme");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Tour", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.TourCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("address");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contactNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("TourCompany", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.TourHasActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("activityID");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tourID");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TourId");

                    b.ToTable("tourHasActivities", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.TourHasDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DestId")
                        .HasColumnType("int")
                        .HasColumnName("destID");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tourID");

                    b.HasKey("Id");

                    b.HasIndex("DestId");

                    b.HasIndex("TourId");

                    b.ToTable("TourHasDestinations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(225)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(225)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(225)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(225)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DBContextTourist.Models.City", b =>
                {
                    b.HasOne("DBContextTourist.Models.Governorate", "Governerate")
                        .WithMany("Cities")
                        .HasForeignKey("GovernerateId")
                        .IsRequired()
                        .HasConstraintName("FK_City_Governorate");

                    b.Navigation("Governerate");
                });

            modelBuilder.Entity("DBContextTourist.Models.Destination", b =>
                {
                    b.HasOne("DBContextTourist.Models.City", "City")
                        .WithMany("Destinations")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Destination_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DBContextTourist.Models.DestinationPicture", b =>
                {
                    b.HasOne("DBContextTourist.Models.Destination", "Dest")
                        .WithMany("DestinationPictures")
                        .HasForeignKey("DestId")
                        .IsRequired()
                        .HasConstraintName("FK_DestinationPictures_Destination");

                    b.Navigation("Dest");
                });

            modelBuilder.Entity("DBContextTourist.Models.Exclude", b =>
                {
                    b.HasOne("DBContextTourist.Models.Tour", "Tour")
                        .WithMany("Excludes")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_Excludes_Tour");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DBContextTourist.Models.Hotel", b =>
                {
                    b.HasOne("DBContextTourist.Models.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Hotel_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DBContextTourist.Models.Include", b =>
                {
                    b.HasOne("DBContextTourist.Models.Tour", "Tour")
                        .WithMany("Includes")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_Includes_Tour");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DBContextTourist.Models.Itinerary", b =>
                {
                    b.HasOne("DBContextTourist.Models.Tour", "Tour")
                        .WithMany("Itineraries")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_Itinerary_Tour");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DBContextTourist.Models.Market", b =>
                {
                    b.HasOne("DBContextTourist.Models.City", "City")
                        .WithMany("Markets")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Market_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DBContextTourist.Models.Restaurant", b =>
                {
                    b.HasOne("DBContextTourist.Models.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DBContextTourist.Models.Tour", b =>
                {
                    b.HasOne("DBContextTourist.Models.TourCompany", "Company")
                        .WithMany("Tours")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Tour_TourCompany");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DBContextTourist.Models.TourHasActivity", b =>
                {
                    b.HasOne("DBContextTourist.Models.Activity", "Activity")
                        .WithMany("TourHasActivities")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_tourHasActivities_Activity");

                    b.HasOne("DBContextTourist.Models.Tour", "Tour")
                        .WithMany("TourHasActivities")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_tourHasActivities_Tour");

                    b.Navigation("Activity");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DBContextTourist.Models.TourHasDestination", b =>
                {
                    b.HasOne("DBContextTourist.Models.Destination", "Dest")
                        .WithMany("TourHasDestinations")
                        .HasForeignKey("DestId")
                        .IsRequired()
                        .HasConstraintName("FK_TourHasDestinations_Destination");

                    b.HasOne("DBContextTourist.Models.Tour", "Tour")
                        .WithMany("TourHasDestinations")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_TourHasDestinations_Tour");

                    b.Navigation("Dest");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DBContextTourist.Models.Activity", b =>
                {
                    b.Navigation("TourHasActivities");
                });

            modelBuilder.Entity("DBContextTourist.Models.City", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("Hotels");

                    b.Navigation("Markets");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("DBContextTourist.Models.Destination", b =>
                {
                    b.Navigation("DestinationPictures");

                    b.Navigation("TourHasDestinations");
                });

            modelBuilder.Entity("DBContextTourist.Models.Governorate", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DBContextTourist.Models.Tour", b =>
                {
                    b.Navigation("Excludes");

                    b.Navigation("Includes");

                    b.Navigation("Itineraries");

                    b.Navigation("TourHasActivities");

                    b.Navigation("TourHasDestinations");
                });

            modelBuilder.Entity("DBContextTourist.Models.TourCompany", b =>
                {
                    b.Navigation("Tours");
                });
#pragma warning restore 612, 618
        }
    }
}
